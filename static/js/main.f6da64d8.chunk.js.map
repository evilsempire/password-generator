{"version":3,"sources":["components/InputField.js","components/ButtonField.js","components/Success.js","components/Logic.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["InputField","props","setInput","e","error","passwordLength","target","value","Number","setState","setValue","state","this","autoComplete","TextField","color","type","onChange","fullWidth","id","label","variant","FormHelperText","className","React","Component","ButtonField","Button","disabled","onClick","calculate","Success","Alert","severity","Logic","randomstring","L","s","randomchar","n","Math","floor","random","String","fromCharCode","length","passwordString","copied","text","onCopy","Wrapper","isTriggered","Card","CardContent","Container","maxWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f6da64d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\n\r\n\r\nclass InputField extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            passwordLength: \"\",\r\n            error: \"\"\r\n        }\r\n    }\r\n\r\n    setInput = (e) => {\r\n\r\n        let passwordLength = e.target.value;\r\n        let error;\r\n        if(!Number(passwordLength)){\r\n            error = \"Should be number.\"\r\n        }else if(passwordLength > 50){\r\n            error = \"Password length cannot be exceed than 50.\"\r\n        }else if(passwordLength< 1){\r\n            error = \"Password length cannot be less than 1\"\r\n        }\r\n\r\n        this.setState({ passwordLength, error  }); \r\n        this.props.setValue(passwordLength, false,error)\r\n    }\r\n\r\n    render() {\r\n        let { passwordLength,error   } = this.state;\r\n        return (\r\n            <form  autoComplete=\"off\">\r\n                <TextField color={!error ? \"primary\" : \"secondary\"} type=\"Number\" value={passwordLength} onChange={(e) => this.setInput(e)} fullWidth id=\"outlined-basic\" label=\"Password Length\" variant=\"outlined\" />\r\n                <FormHelperText id=\"component-error-text\" className=\"error\">{error}</FormHelperText>\r\n               \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputField;","import React from \"react\";\r\nimport { Button, Icon, SaveIcon } from '@material-ui/core';\r\n\r\n\r\nclass ButtonField extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"generate\">\r\n                <Button disabled={this.props.error ? true: false} variant=\"outlined\" onClick={() => this.props.calculate()}>Generate</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ButtonField;","import React from \"react\";\r\nimport Alert from '@material-ui/lab/Alert'\r\nclass Success extends React.Component{\r\n    render(){\r\n        return <Alert severity=\"success\" color=\"info\">\r\n        Copied to Clipboard!\r\n      </Alert>\r\n    }\r\n}\r\n\r\nexport default Success;","import React from \"react\";\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\n\r\nimport Success from \"./Success\";\r\n\r\nclass Logic extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            passwordString: this.randomstring(props.passwordLength),\r\n            copied: false\r\n        }\r\n    }\r\n\r\n    randomstring = (L) => {\r\n        var s = '';\r\n        var randomchar = function () {\r\n            var n = Math.floor(Math.random() * 62);\r\n            if (n < 10) return n; //1-10\r\n            if (n < 36) return String.fromCharCode(n + 55); //A-Z\r\n            return String.fromCharCode(n + 61); //a-z\r\n        }\r\n        while (s.length < L) s += randomchar();\r\n        return s;\r\n    }\r\n\r\n    render() {\r\n\r\n        const { passwordString } = this.state;\r\n\r\n        return (<div>\r\n            <CopyToClipboard className=\"copy\" text={passwordString}\r\n                onCopy={() => this.setState({ copied: true })}>\r\n                <div>\r\n                <span>{passwordString} </span>\r\n                <FileCopyOutlinedIcon className=\"copy-icon\" />\r\n                </div>\r\n            </CopyToClipboard>\r\n            {this.state.copied ? <Success /> : null}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Logic","import React from \"react\";\r\nimport { Container, Card, CardContent } from '@material-ui/core';\r\n\r\nimport InputField from \"./InputField\";\r\nimport ButtonField from \"./ButtonField\";\r\nimport Logic from \"./Logic\";\r\n\r\nclass Wrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            passwordLength: 0,\r\n            isTriggered: false,\r\n            error: \"\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card variant=\"outlined\">\r\n                <CardContent>\r\n                    <Container maxWidth=\"sm\">\r\n                        <InputField setValue={(passwordLength, isTriggered,error) => this.setState({ passwordLength, isTriggered,error })} />\r\n                        {this.state.isTriggered ? <Logic passwordLength={this.state.passwordLength} /> : null}\r\n                        <ButtonField error={this.state.error} calculate={(isTriggered) => this.setState({ isTriggered: !isTriggered })} />\r\n                    </Container>\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>PASSWORD GENERATOR</h1>\n      <Wrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}